name: Deploy Falco Runtime Threat Detection

on:
  push:
    branches: [main, master]
    paths:
      - 'values/**'
      - '.github/workflows/falco-deployment.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'values/**'
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'Target cluster name'
        required: false
        default: 'minikube'
      namespace:
        description: 'Namespace to deploy Falco'
        required: false
        default: 'falco'

env:
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name || 'minikube' }}
  FALCO_NAMESPACE: ${{ github.event.inputs.namespace || 'falco' }}

jobs:
  setup-cluster:
    runs-on: ubuntu-latest
    outputs:
      cluster-ready: ${{ steps.cluster-check.outputs.ready }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Start Minikube cluster
        run: |
          minikube start --driver=docker --memory=4096 --cpus=2
          minikube status

      - name: Verify cluster readiness
        id: cluster-check
        run: |
          kubectl get nodes
          kubectl cluster-info
          echo "ready=true" >> $GITHUB_OUTPUT

  deploy-falco:
    needs: setup-cluster
    runs-on: ubuntu-latest
    if: needs.setup-cluster.outputs.cluster-ready == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'

      - name: Setup Minikube context
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker --memory=4096 --cpus=2

      - name: Add Falco Helm repository
        run: |
          helm repo add falcosecurity https://falcosecurity.github.io/charts
          helm repo update

      - name: Create Falco namespace
        run: |
          kubectl create namespace ${{ env.FALCO_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy custom Falco rules
        run: |
          if [ -f "values/custom-rules.yaml" ]; then
            kubectl apply -f values/custom-rules.yaml -n ${{ env.FALCO_NAMESPACE }}
          else
            echo "No custom rules found, using default Falco rules"
          fi

      - name: Deploy Falco with custom values
        run: |
          # Replace Teams webhook URL with secret
          sed -i 's|YOUR_TEAMS_WEBHOOK_URL_HERE|${{ secrets.TEAMS_WEBHOOK_URL }}|g' values/falco-values.yaml
          
          helm upgrade --install falco falcosecurity/falco \
            --namespace ${{ env.FALCO_NAMESPACE }} \
            --values values/falco-values.yaml \
            --timeout 10m \
            --wait

      - name: Verify Falco deployment
        run: |
          kubectl wait --for=condition=Ready pods --all -n ${{ env.FALCO_NAMESPACE }} --timeout=300s
          kubectl get pods -n ${{ env.FALCO_NAMESPACE }}
          kubectl get daemonset -n ${{ env.FALCO_NAMESPACE }}

      - name: Check Falco logs
        run: |
          echo "=== Falco Logs ==="
          kubectl logs -n ${{ env.FALCO_NAMESPACE }} daemonset/falco --tail=20
          echo "=== Falcosidekick Logs ==="
          kubectl logs -n ${{ env.FALCO_NAMESPACE }} deployment/falco-falcosidekick --tail=10

    security-tests:
    needs: deploy-falco
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Minikube context
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker --memory=4096 --cpus=2

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Run shell access detection test
        run: |
          echo "=== Running Falco Shell Access Detection Test ==="
          
          # Deploy test pod
          kubectl run security-test --image=nginx --restart=Never
          kubectl wait --for=condition=Ready pod/security-test --timeout=60s
          
          # Execute shell commands (should trigger Falco alert)
          echo "Executing shell commands to trigger Falco alert..."
          kubectl exec security-test -- /bin/sh -c "whoami; ls -la; cat /etc/passwd" || true
          
          # Wait for alert to be processed and sent to Teams
          echo "Waiting for Falco to process and send alert to Teams..."
          sleep 10
          

      - name: Cleanup test pod
        run: |
          kubectl delete pod security-test --ignore-not-found=true


  cleanup:
    needs: [setup-cluster, deploy-falco, security-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube delete || echo "Minikube already deleted or not found"

