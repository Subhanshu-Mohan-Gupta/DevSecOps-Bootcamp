name: AI-Powered Security Review

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: AI Security Analysis
    
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        npm install -g snyk
        npm install || true
        
    - name: Authenticate Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}
      
    - name: Run Snyk Code Analysis
      id: snyk-scan
      run: |
        echo "Starting AI-powered security scan..."
        snyk code test \
          --sarif-file-output=snyk-results.sarif \
          --severity-threshold=medium \
          --json > snyk-results.json || true
          
        # Extract metrics with better error handling for SARIF format
        TOTAL_ISSUES=$(jq -r '.runs[0].results | length' snyk-results.json 2>/dev/null || echo "0")
        HIGH_ISSUES=$(jq -r '.runs[0].results | map(select(.level == "error")) | length' snyk-results.json 2>/dev/null || echo "0") 
        CRITICAL_ISSUES=$(jq -r '.runs[0].results | map(select(.ruleId | test("CodeInjection|CommandInjection|PT"))) | length' snyk-results.json 2>/dev/null || echo "0")
        
        echo "high_issues=$HIGH_ISSUES" >> $GITHUB_OUTPUT
        echo "critical_issues=$CRITICAL_ISSUES" >> $GITHUB_OUTPUT
        echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        echo "Scan Results: Total=$TOTAL_ISSUES, Critical=$CRITICAL_ISSUES, High=$HIGH_ISSUES"


        
    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk-results.sarif
        category: snyk-code
        
    - name: Security Gate Check
      if: steps.snyk-scan.outputs.critical_issues > 0 || steps.snyk-scan.outputs.high_issues > 0
      run: |
        echo "‚ùå Security Gate Failed!"
        echo "Critical Issues: ${{ steps.snyk-scan.outputs.critical_issues }}"
        echo "High Severity Issues: ${{ steps.snyk-scan.outputs.high_issues }}"
        echo "This pull request cannot be merged until security issues are resolved."
        exit 1
        
    - name: Log Security Metrics
      if: always()
      run: |
        python .github/scripts/log-metrics.py \
          --pr-number ${{ github.event.number }} \
          --total-issues ${{ steps.snyk-scan.outputs.total_issues }} \
          --high-issues ${{ steps.snyk-scan.outputs.high_issues }} \
          --critical-issues ${{ steps.snyk-scan.outputs.critical_issues }} \
          --commit-sha ${{ github.sha }}
          
    - name: Upload Security Metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-metrics-${{ github.event.number }}
        path: |
          security-metrics-*.json
          metrics-summary.txt
          snyk-results.json
          snyk-results.sarif

