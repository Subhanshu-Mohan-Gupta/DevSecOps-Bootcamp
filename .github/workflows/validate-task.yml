name: Validate DevSecOps Tasks

on:
  pull_request:
    # Only fire when task folders are touched
    paths:
      - 'T*/**'

jobs:
  # 1) Detect which task folders were modified in the PR
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.set.outputs.changed }}
    steps:
      - uses: actions/checkout@v3

      - name: List modified task folders
        id: set
        run: |
          # Get unique top-level task directories (e.g., T13-Secure-Supply-Chain)
          CHANGED=$(git diff --name-only origin/main...HEAD \
                     | grep -oE '^T[0-9]{2}[^/]+' \
                     | sort -u \
                     | jq -R -s -c 'split("\n")[:-1]')
          echo "changed=$CHANGED" >> "$GITHUB_OUTPUT"
          echo "Changed task folders: $CHANGED"

  # 2) Run each task’s own CI in parallel
  task-ci:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.folders != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changes.outputs.folders) }}
    steps:
      - uses: actions/checkout@v3

      # Each task already ships a task-specific workflow or script.
      - name: Trigger task-specific CI
        run: |
          cd "${{ matrix.folder }}"

          echo "▶ Running CI for ${{ matrix.folder }}"

          # If the task folder contains a shell script wrapper, run it.
          if [[ -f .github/workflows/ci.sh ]]; then
            bash .github/workflows/ci.sh

          # Otherwise, if it ships just a ci.yml file (most tasks), reuse act==0
          elif [[ -f .github/workflows/ci.yml ]]; then
            echo "::notice::Task provides its own workflow; considered passing here."
          else
            echo "::error::No task CI found in ${{ matrix.folder }}"
            exit 1
          fi
            echo "✅ CI for ${{ matrix.folder }} completed successfully."